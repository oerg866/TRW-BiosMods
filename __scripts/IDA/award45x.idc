//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2023 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file contains the user-defined type definitions.
//      To use it press F2 in IDA and enter the name of this file.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();
	set_inf_attr(INF_LOW_OFF, 0xE000);
	set_inf_attr(INF_HIGH_OFF, 0x10000);
}

static Enums_0(id) {

	id = add_enum(-1,"AwardChipsetRegisterType",0x1100000);
	id = add_enum(-1,"stringcodes",0x1100000);
	add_enum_member(id,"V_DONE",	0,	-1);
	add_enum_member(id,"V_DONE1",	0X1,	-1);
	add_enum_member(id,"V_BORDER",	0X2,	-1);
	add_enum_member(id,"V_CLEAR",	0X3,	-1);
	add_enum_member(id,"V_STRSHOW",	0X4,	-1);
	add_enum_member(id,"V_POS",	0X5,	-1);
	add_enum_member(id,"V_HILITE",	0X6,	-1);
	add_enum_member(id,"V_REVERSE",	0X7,	-1);
	add_enum_member(id,"V_NORMAL",	0X8,	-1);
	add_enum_member(id,"V_BLINK",	0X9,	-1);
	add_enum_member(id,"V_WARN",	0XA,	-1);
	add_enum_member(id,"V_NEWLINE",	0XB,	-1);
	add_enum_member(id,"V_ADDX",	0XC,	-1);
	add_enum_member(id,"V_SUBX",	0XD,	-1);
	add_enum_member(id,"V_ADDY",	0XE,	-1);
	add_enum_member(id,"V_SUBY",	0XF,	-1);
	add_enum_member(id,"V_CALLROUTINE",	0X10,	-1);
	id = add_enum(-1,"S_BorderStyle",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"DoubleBorder",	0X1,	0x1);
	add_enum_member(id,"EmptyBorder",	0X2,	0x2);
	add_enum_member(id,"LineBorder",	0X4,	0x4);
	add_enum_member(id,"NoBorder",	0X8,	0x8);
	add_enum_member(id,"ShadowBorder",	0X10,	0x10);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("AwardChipsetRegisters");
	id = get_struc_id("MenuItem");
	id = get_struc_id("SysbiosMenuDef");
	id = get_struc_id("S_CallRoutine");
	id = get_struc_id("MenuItemCallback");
	id = get_struc_id("MenuPageEntry");
	id = get_struc_id("MenuPageFuncs");
	id = get_struc_id("S_StrShow");
	id = get_struc_id("S_CursorChange");
	id = get_struc_id("S_Border");
	id = get_struc_id("S_SetPos");
	id = get_struc_id("S_TextCtrl");
	id = get_struc_id("S_ClearRect");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"AwardChipsetRegisters",0);
	id = add_struc(-1,"MenuItem",0);
	id = add_struc(-1,"SysbiosMenuDef",0);
	id = add_struc(-1,"S_CallRoutine",0);
	id = add_struc(-1,"MenuItemCallback",0);
	id = add_struc(-1,"MenuPageEntry",0);
	id = add_struc(-1,"MenuPageFuncs",0);
	id = add_struc(-1,"S_StrShow",0);
	id = add_struc(-1,"S_CursorChange",0);
	id = add_struc(-1,"S_Border",0);
	id = add_struc(-1,"S_SetPos",0);
	id = add_struc(-1,"S_TextCtrl",0);
	id = add_struc(-1,"S_ClearRect",0);
	
	id = get_struc_id("AwardChipsetRegisters");
	mid = add_struc_member(id,"Type",	0,	0x00800400,	get_enum("AwardChipsetRegisterType"),	1);
	mid = add_struc_member(id,"Index",	0X1,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"PCIDeviceFuncDev",	0X2,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"Mask",	0X3,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Value",	0X5,	0x10000400,	-1,	2);
	
	id = get_struc_id("MenuItem");
	mid = add_struc_member(id,"TypeStatus",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ItemName",	0X2,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"DeviceReg",	0X4,	0x10100400,	-1,	2);
	mid = add_struc_member(id,"DeviceRegMask",	0X6,	0x10600400,	-1,	2);
	mid = add_struc_member(id,"CMOSReg",	0X8,	0x00100400,	-1,	1);
	mid = add_struc_member(id,"CMOSRegMask",	0X9,	0x10600400,	-1,	2);
	mid = add_struc_member(id,"FirstOptionStr",	0XB,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"MinVal",	0XD,	0x10100400,	-1,	2);
	mid = add_struc_member(id,"MaxVal",	0XF,	0x10100400,	-1,	2);
	mid = add_struc_member(id,"XPos",	0X11,	0x00200400,	-1,	1);
	mid = add_struc_member(id,"YPos",	0X12,	0x00200400,	-1,	1);
	mid = add_struc_member(id,"PowerOnDefault",	0X13,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SetupDefault",	0X15,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"HelpStr",	0X17,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	
	id = get_struc_id("SysbiosMenuDef");
	mid = add_struc_member(id,"PageStart",	0,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"PageEnd",	0X2,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"StartupString",	0X4,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	
	id = get_struc_id("S_CallRoutine");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	mid = add_struc_member(id,"Offset",	0X1,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	
	id = get_struc_id("MenuItemCallback");
	mid = add_struc_member(id,"MenuItemPtr",	0,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"Callback",	0X2,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	
	id = get_struc_id("MenuPageEntry");
	mid = add_struc_member(id,"CBList1Ptr",	0,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"CBList2Ptr",	0X2,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"MenuFuncsPtr",	0X4,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	
	id = get_struc_id("MenuPageFuncs");
	mid = add_struc_member(id,"Func1",	0,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"Func2",	0X2,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"Func3",	0X4,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	mid = add_struc_member(id,"Func4",	0X6,	0x10500400,	0XF0000,	2,	BADADDR,	0,	0x000002);
	
	id = get_struc_id("S_StrShow");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	mid = add_struc_member(id,"x",	0X1,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"y",	0X2,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"string",	0X3,	0x10500400,	BADADDR,	2,	BADADDR,	0,	0x000001);
	
	id = get_struc_id("S_CursorChange");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	mid = add_struc_member(id,"val",	0X1,	0x00000400,	-1,	1);
	
	id = get_struc_id("S_Border");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	mid = add_struc_member(id,"leftx",	0X1,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"lefty",	0X2,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"rightx",	0X3,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"righty",	0X4,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"type",	0X5,	0x00000400,	-1,	1);
	
	id = get_struc_id("S_SetPos");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	mid = add_struc_member(id,"x",	0X1,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"y",	0X2,	0x00000400,	-1,	1);
	
	id = get_struc_id("S_TextCtrl");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	
	id = get_struc_id("S_ClearRect");
	mid = add_struc_member(id,"field_0",	0,	0x00800400,	get_enum("stringcodes"),	1);
	mid = add_struc_member(id,"left",	0X1,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"top",	0X2,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"right",	0X3,	0x00000400,	-1,	1);
	mid = add_struc_member(id,"bottom",	0X4,	0x00000400,	-1,	1);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
        end_type_updating(UTP_STRUCT);
}

// End of file.
